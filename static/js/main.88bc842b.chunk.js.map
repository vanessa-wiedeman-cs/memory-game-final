{"version":3,"sources":["serviceWorker.js","components/photoDisplay.js","index.js"],"names":["Boolean","window","location","hostname","match","PhotoDisplay","props","src","url","alt","id","onClick","handleClick","newGame","Game","state","photos","score","x","document","getElementById","innerHTML","map","photo","selected","console","log","className","this","key","React","Component","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"ojDAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCTSC,MAPf,SAAsBC,GAClB,OACI,yBAAKC,IAAKD,EAAME,IAAKC,IAAI,aAAaC,GAAIJ,EAAMI,GAChDC,QAAS,kBAAML,EAAMM,YAAYN,EAAMI,QCE3CG,GAAU,EAGRC,E,2MAEFC,MAAQ,CAACC,SACDC,MAAO,G,EAEfL,YAAc,SAACF,EAAIQ,GAGfC,SAASC,eAAe,SAASC,UAAY,mBAElC,EAAKN,MAAMC,OAAOM,KAAI,SAAAC,GAYjC,OAXIA,EAAMb,KAAOA,KACQ,IAAnBa,EAAMC,UACR,EAAKT,MAAME,OAAS,EACpBM,EAAMC,UAAW,EACjBL,SAASC,eAAe,SAASC,UAAY,UAAY,EAAKN,MAAME,MACpEQ,QAAQC,IAAI,EAAKX,MAAME,SAEvBE,SAASC,eAAe,SAASC,UAAY,2DAC7CR,GAAU,IAGPU,KAGe,KAArB,EAAKR,MAAME,QACZJ,GAAU,GAGTA,IAEO,EAAKE,MAAMC,OAAOM,KAAI,SAAAC,GAG1B,OAFAA,EAAMC,UAAW,EACjBX,GAAU,EACHU,KAEX,EAAKR,MAAME,MAAQ,I,wEA8BlB,IAAD,OACR,OACA,yBAAKU,UAAU,QACf,6BAAM,yBAAKjB,GAAG,SAAR,YACN,6BACKkB,KAAKb,MAAMC,OAAOM,KAAI,SAAAC,GAAK,OACxB,kBAAC,EAAD,CACIf,IAAKe,EAAMf,IACXE,GAAIa,EAAMb,GACVmB,IAAKN,EAAMb,GACXE,YAAa,EAAKA,uB,GA5EXkB,IAAMC,WAyFzBC,IAASC,OAAO,kBAAC,EAAD,MAAUd,SAASC,eAAe,SFgC5C,kBAAmBc,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhB,QAAQgB,MAAMA,EAAMC,c","file":"static/js/main.88bc842b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\n\r\nfunction PhotoDisplay(props) {\r\n    return(\r\n        <img src={props.url} alt=\"anime girl\" id={props.id}\r\n        onClick={() => props.handleClick(props.id)}></img>\r\n    )\r\n}\r\n\r\nexport default PhotoDisplay;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport photos from './anime.json';\nimport PhotoDisplay from './components/photoDisplay';\nvar newGame = false;\nvar randomArray = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nclass Game extends React.Component{\n    \n    state = {photos,\n            score: 0};\n    //state = {score: 0};\n    handleClick = (id, x) => {\n        \n        //var photo = [false, false, false, false, false, false, false, false, false, false];\n        document.getElementById(\"score\").innerHTML = \"Have a nice day!\";\n       // document.write(write[1]);        \n       var photo = this.state.photos.map(photo => {\n        if (photo.id === id) {\n          if (photo.selected === false) {\n            this.state.score += 1;  \n            photo.selected = true;\n            document.getElementById(\"score\").innerHTML = \"Score: \" + this.state.score;\n            console.log(this.state.score);\n          } else {\n            document.getElementById(\"score\").innerHTML = \"Have a nice day, You lost! (Click an image to try again)\";\n            newGame = true;\n          }\n        }\n        return photo;\n      });\n\n      if(this.state.score === 10){\n        newGame = true;\n      }\n      \n      if(newGame)\n      {\n        photo = this.state.photos.map(photo => {\n            photo.selected = false;\n            newGame = false;\n            return photo;\n          });\n        this.state.score = 0;\n      }\n      var index = 10;\n      var oldIndex = 0; \n      var newIndex;\n      var secondIndex;\n\n      /*while(index != 0)\n      {\n        \n        secondIndex = randomArray[oldIndex];\n        console.log(\"Second index\"+ secondIndex);\n        newIndex = randomArray[index];\n        console.log(\"new index\"+ newIndex);\n        randomArray[oldIndex] = newIndex;\n        randomArray[newIndex] = secondIndex;\n        index--;\n        oldIndex++;\n        \n      }*/\n      \n      /*var x = 0;\n      photo = this.state.photos.map(photo => {\n        photo.id = randomArray[x];\n        x++;\n        return photo;\n      });\n      */\n      }\n      \nrender(){\nreturn(\n<div className=\"Game\">\n<div ><div id=\"score\">Score: 0</div>\n<br></br>\n    {this.state.photos.map(photo => (\n        <PhotoDisplay\n            url={photo.url}\n            id={photo.id}\n            key={photo.id}\n            handleClick={this.handleClick}\n            >\n\n        </PhotoDisplay>\n    ))}\n\n</div>\n</div>\n);\n}\n}\n\n//ReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(<Game />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n\n/*<img src=\"https://66.media.tumblr.com/d0de05292ff55716fe5e04829411663e/tumblr_pf7xynYOGR1t2c4f8o10_250.png\" alt=\"cheeks\" onClick={this.handleClick.bind(this,1)}></img>\n<img src=\"https://66.media.tumblr.com/7b1790aa4b0e76318f62da5d4a0dd69f/tumblr_pf7xynYOGR1t2c4f8o2_250.png\" alt=\"cheeks\" onClick={this.handleClick.bind(this,2)}></img>\n<img src=\"https://66.media.tumblr.com/c14462350e03750c59817bb6c15c75be/tumblr_pf7xynYOGR1t2c4f8o8_250.png\" alt=\"cheeks\" onClick={this.handleClick.bind(this,3)}></img>\n<img src=\"https://i.pinimg.com/474x/4b/32/87/4b328733363460346f22a996eb4265e1.jpg\" alt=\"cheeks\"  onClick={this.handleClick.bind(this,4)}></img>\n<img src=\"https://66.media.tumblr.com/c881cc754e14b2c7923172a3bf1b8329/tumblr_pf7xynYOGR1t2c4f8o1_250.png\" alt=\"cheeks\"  onClick={this.handleClick.bind(this,5)}></img>\n<img src=\"https://66.media.tumblr.com/f0b757b43f583c38b60a9cc92449199a/tumblr_pf7xynYOGR1t2c4f8o4_250.png\" alt=\"cheeks\" onClick={this.handleClick.bind(this,6)}></img>\n<img src=\"https://66.media.tumblr.com/a3dae88932da2ee062bf94835cd88976/tumblr_pkfa9pUxkR1xia4jgo2_250.png\" alt=\"cheeks\"  onClick={this.handleClick.bind(this,7)}></img>\n<img src=\"https://66.media.tumblr.com/b0daf8fc96634b9579df43efa5aed693/tumblr_pkfa9pUxkR1xia4jgo3_250.png\" alt=\"cheeks\" onClick={this.handleClick.bind(this,8)}></img>\n<img src=\"https://66.media.tumblr.com/c00962bc91dfcd1d36d0a1d9db8ea05b/tumblr_pawi3jsYyf1x1ko3mo8_250.jpg\" alt=\"cheeks\"  onClick={this.handleClick.bind(this,9)}></img>\n<img src=\"https://66.media.tumblr.com/b5d62746cfb1048275480877bfc0d3af/tumblr_pi1vet7f3b1wjiw6ao1_250.jpg\" alt=\"cheeks\"  onClick={this.handleClick.bind(this,10)}></img>\n*/"],"sourceRoot":""}